
wifiCCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08002c4c  08002c4c  00003c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800303c  0800303c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800303c  0800303c  0000403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003044  08003044  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003044  08003044  00004044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003048  08003048  00004048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800304c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  080030a8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080030a8  00005210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073b2  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d3  00000000  00000000  0000c43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000d818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c7  00000000  00000000  0000de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000149b  00000000  00000000  0000e327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bdf  00000000  00000000  0000f7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f04  00000000  00000000  000173a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c2a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc0  00000000  00000000  0009c2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002c34 	.word	0x08002c34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08002c34 	.word	0x08002c34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	f5ad 6de6 	sub.w	sp, sp, #1840	@ 0x730
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fa82 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f882 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f914 	bl	80007f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 f8e8 	bl	80007a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t rxBuffer[512] = {0};
 80005d4:	f507 63e6 	add.w	r3, r7, #1840	@ 0x730
 80005d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80005dc:	4618      	mov	r0, r3
 80005de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005e2:	461a      	mov	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f001 fea7 	bl	8002338 <memset>
  uint8_t ATisOK;
  int channel;
  int onoff;
  int led = 1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
  char ATcommand[64];
  char ATcommandB[1024];
  char ATcommandN[100];
  char ATcommandF[100];
  char ATcommandT[16];
  sprintf(ATcommandB,"<!DOCTYPE html><html>\n<head>\n\
 80005f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005f4:	4930      	ldr	r1, [pc, #192]	@ (80006b8 <main+0xfc>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fe7c 	bl	80022f4 <siprintf>
  .button-on {background-color: #008000;}\n.button-on:active\
  {background-color: #008000;}\n.button-off {background-color: #808080;}\n\
  .button-off:active {background-color: #808080;}\n\
  p {font-size: 14px;color: #808080;margin-bottom: 20px;}\n\
  </style>\n</head>\n<body>\n<h1>STM32 - ESP8266</h1>");
  sprintf(ATcommandN,"<p>Light is currently on\
 80005fc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000600:	492e      	ldr	r1, [pc, #184]	@ (80006bc <main+0x100>)
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fe76 	bl	80022f4 <siprintf>
  </p><a class=\"button button-off\" href=\"/lightoff\">OFF</a>");
  sprintf(ATcommandF,"<p>Light is currently off\
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	492c      	ldr	r1, [pc, #176]	@ (80006c0 <main+0x104>)
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fe70 	bl	80022f4 <siprintf>
  </p><a class=\"button button-on\" href=\"/lighton\">ON</a>");
  sprintf(ATcommandT,"</body></html>");
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	492b      	ldr	r1, [pc, #172]	@ (80006c4 <main+0x108>)
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fe6b 	bl	80022f4 <siprintf>
  int countB = strlen(ATcommandB);
 800061e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fddc 	bl	80001e0 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	f8c7 3728 	str.w	r3, [r7, #1832]	@ 0x728
  int countN = strlen(ATcommandN);
 800062e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdd4 	bl	80001e0 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
  int countF = strlen(ATcommandF);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fdcc 	bl	80001e0 <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	f8c7 3720 	str.w	r3, [r7, #1824]	@ 0x720
  int countT = strlen(ATcommandT);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdc5 	bl	80001e0 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c

  sprintf(ATcommand,"AT+RST\r\n");
 800065c:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8000660:	4919      	ldr	r1, [pc, #100]	@ (80006c8 <main+0x10c>)
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fe46 	bl	80022f4 <siprintf>
  memset(rxBuffer,0,sizeof(rxBuffer));
 8000668:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 800066c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fe60 	bl	8002338 <memset>
  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000678:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fdaf 	bl	80001e0 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 800068a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068e:	480f      	ldr	r0, [pc, #60]	@ (80006cc <main+0x110>)
 8000690:	f001 f9de 	bl	8001a50 <HAL_UART_Transmit>
  HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000694:	f207 511c 	addw	r1, r7, #1308	@ 0x51c
 8000698:	2364      	movs	r3, #100	@ 0x64
 800069a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800069e:	480b      	ldr	r0, [pc, #44]	@ (80006cc <main+0x110>)
 80006a0:	f001 fa61 	bl	8001b66 <HAL_UART_Receive>
  HAL_Delay(500);
 80006a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006a8:	f000 fa82 	bl	8000bb0 <HAL_Delay>
 80006ac:	2300      	movs	r3, #0
  }
#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80006ae:	4618      	mov	r0, r3
 80006b0:	f507 67e6 	add.w	r7, r7, #1840	@ 0x730
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	08002c4c 	.word	0x08002c4c
 80006bc:	08002f2c 	.word	0x08002f2c
 80006c0:	08002f80 	.word	0x08002f80
 80006c4:	08002fd4 	.word	0x08002fd4
 80006c8:	08002fe4 	.word	0x08002fe4
 80006cc:	20000078 	.word	0x20000078

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	@ 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe2a 	bl	8002338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b28      	ldr	r3, [pc, #160]	@ (800079c <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a27      	ldr	r2, [pc, #156]	@ (800079c <SystemClock_Config+0xcc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
 8000704:	4b25      	ldr	r3, [pc, #148]	@ (800079c <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800071c:	4a20      	ldr	r2, [pc, #128]	@ (80007a0 <SystemClock_Config+0xd0>)
 800071e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000748:	2348      	movs	r3, #72	@ 0x48
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fcd1 	bl	8001100 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000764:	f000 f89a 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f000 ff33 	bl	80015f0 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000790:	f000 f884 	bl	800089c <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	@ 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_USART1_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_USART1_UART_Init+0x4c>)
 80007dc:	f001 f8e8 	bl	80019b0 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f859 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000078 	.word	0x20000078
 80007f4:	40011000 	.word	0x40011000

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a1f      	ldr	r2, [pc, #124]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a18      	ldr	r2, [pc, #96]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_GPIO_Init+0x9c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_GPIO_Init+0x9c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a11      	ldr	r2, [pc, #68]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000868:	480b      	ldr	r0, [pc, #44]	@ (8000898 <MX_GPIO_Init+0xa0>)
 800086a:	f000 fc2f 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800086e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_GPIO_Init+0xa0>)
 8000888:	f000 fa9c 	bl	8000dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020800 	.word	0x40020800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	@ (800097c <HAL_UART_MspInit+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12c      	bne.n	8000974 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <HAL_UART_MspInit+0x88>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	4a17      	ldr	r2, [pc, #92]	@ (8000980 <HAL_UART_MspInit+0x88>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6453      	str	r3, [r2, #68]	@ 0x44
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <HAL_UART_MspInit+0x88>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <HAL_UART_MspInit+0x88>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <HAL_UART_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000952:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000964:	2307      	movs	r3, #7
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4805      	ldr	r0, [pc, #20]	@ (8000984 <HAL_UART_MspInit+0x8c>)
 8000970:	f000 fa28 	bl	8000dc4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	@ 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40011000 	.word	0x40011000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 f8c7 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f001 fc96 	bl	8002348 <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20010000 	.word	0x20010000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	200000c0 	.word	0x200000c0
 8000a50:	20000210 	.word	0x20000210

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f001 fc55 	bl	8002354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fd87 	bl	80005bc <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000abc:	0800304c 	.word	0x0800304c
  ldr r2, =_sbss
 8000ac0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ac4:	20000210 	.word	0x20000210

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <HAL_Init+0x40>)
 8000ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <HAL_Init+0x40>)
 8000ae2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <HAL_Init+0x40>)
 8000aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f931 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fed2 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023c00 	.word	0x40023c00

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f93b 	bl	8000daa <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f911 	bl	8000d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	200000c4 	.word	0x200000c4

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200000c4 	.word	0x200000c4

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	f7ff ffee 	bl	8000b98 <HAL_GetTick>
 8000bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc8:	d005      	beq.n	8000bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_Delay+0x44>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd6:	bf00      	nop
 8000bd8:	f7ff ffde 	bl	8000b98 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8f7      	bhi.n	8000bd8 <HAL_Delay+0x28>
  {
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	@ (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	@ 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff47 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff5c 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffb0 	bl	8000d18 <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e159      	b.n	8001094 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8148 	bne.w	800108e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d005      	beq.n	8000e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d130      	bne.n	8000e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0201 	and.w	r2, r3, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d017      	beq.n	8000eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80a2 	beq.w	800108e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b57      	ldr	r3, [pc, #348]	@ (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a56      	ldr	r2, [pc, #344]	@ (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b54      	ldr	r3, [pc, #336]	@ (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f66:	4a52      	ldr	r2, [pc, #328]	@ (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a49      	ldr	r2, [pc, #292]	@ (80010b4 <HAL_GPIO_Init+0x2f0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x202>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a48      	ldr	r2, [pc, #288]	@ (80010b8 <HAL_GPIO_Init+0x2f4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x1fe>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	@ (80010bc <HAL_GPIO_Init+0x2f8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	@ (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x1f6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a45      	ldr	r2, [pc, #276]	@ (80010c4 <HAL_GPIO_Init+0x300>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x1f2>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	@ (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b38      	ldr	r3, [pc, #224]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100a:	4a2f      	ldr	r2, [pc, #188]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001010:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001034:	4a24      	ldr	r2, [pc, #144]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103a:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105e:	4a1a      	ldr	r2, [pc, #104]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001088:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <HAL_GPIO_Init+0x304>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f aea2 	bls.w	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e267      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d075      	beq.n	800120a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800111e:	4b88      	ldr	r3, [pc, #544]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b04      	cmp	r3, #4
 8001128:	d00c      	beq.n	8001144 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b85      	ldr	r3, [pc, #532]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001132:	2b08      	cmp	r3, #8
 8001134:	d112      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001136:	4b82      	ldr	r3, [pc, #520]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001142:	d10b      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	4b7e      	ldr	r3, [pc, #504]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d05b      	beq.n	8001208 <HAL_RCC_OscConfig+0x108>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d157      	bne.n	8001208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e242      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001164:	d106      	bne.n	8001174 <HAL_RCC_OscConfig+0x74>
 8001166:	4b76      	ldr	r3, [pc, #472]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a75      	ldr	r2, [pc, #468]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xb0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x98>
 800117e:	4b70      	ldr	r3, [pc, #448]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6f      	ldr	r2, [pc, #444]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6d      	ldr	r3, [pc, #436]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6c      	ldr	r2, [pc, #432]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xb0>
 8001198:	4b69      	ldr	r3, [pc, #420]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a68      	ldr	r2, [pc, #416]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b66      	ldr	r3, [pc, #408]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a65      	ldr	r2, [pc, #404]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fcee 	bl	8000b98 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fcea 	bl	8000b98 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	@ 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e207      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xc0>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fcda 	bl	8000b98 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fcd6 	bl	8000b98 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	@ 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1f3      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b51      	ldr	r3, [pc, #324]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0xe8>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001216:	4b4a      	ldr	r3, [pc, #296]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b41      	ldr	r3, [pc, #260]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x152>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1c7      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4937      	ldr	r1, [pc, #220]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e03a      	b.n	80012de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d020      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <HAL_RCC_OscConfig+0x244>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fc8f 	bl	8000b98 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fc8b 	bl	8000b98 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1a8      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4925      	ldr	r1, [pc, #148]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <HAL_RCC_OscConfig+0x244>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc6e 	bl	8000b98 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc6a 	bl	8000b98 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e187      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d036      	beq.n	8001358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d016      	beq.n	8001320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_RCC_OscConfig+0x248>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fc4e 	bl	8000b98 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fc4a 	bl	8000b98 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e167      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_RCC_OscConfig+0x240>)
 8001314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x200>
 800131e:	e01b      	b.n	8001358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_RCC_OscConfig+0x248>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fc37 	bl	8000b98 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132c:	e00e      	b.n	800134c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fc33 	bl	8000b98 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d907      	bls.n	800134c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e150      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
 8001340:	40023800 	.word	0x40023800
 8001344:	42470000 	.word	0x42470000
 8001348:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ea      	bne.n	800132e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8097 	beq.w	8001494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136a:	4b81      	ldr	r3, [pc, #516]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b7d      	ldr	r3, [pc, #500]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a7c      	ldr	r2, [pc, #496]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b7a      	ldr	r3, [pc, #488]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b77      	ldr	r3, [pc, #476]	@ (8001574 <HAL_RCC_OscConfig+0x474>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b74      	ldr	r3, [pc, #464]	@ (8001574 <HAL_RCC_OscConfig+0x474>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a73      	ldr	r2, [pc, #460]	@ (8001574 <HAL_RCC_OscConfig+0x474>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fbf3 	bl	8000b98 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff fbef 	bl	8000b98 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e10c      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001574 <HAL_RCC_OscConfig+0x474>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x2ea>
 80013dc:	4b64      	ldr	r3, [pc, #400]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e0:	4a63      	ldr	r2, [pc, #396]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e8:	e01c      	b.n	8001424 <HAL_RCC_OscConfig+0x324>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x30c>
 80013f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001402:	4a5b      	ldr	r2, [pc, #364]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6713      	str	r3, [r2, #112]	@ 0x70
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0x324>
 800140c:	4b58      	ldr	r3, [pc, #352]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001410:	4a57      	ldr	r2, [pc, #348]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6713      	str	r3, [r2, #112]	@ 0x70
 8001418:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141c:	4a54      	ldr	r2, [pc, #336]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800141e:	f023 0304 	bic.w	r3, r3, #4
 8001422:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d015      	beq.n	8001458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fbb4 	bl	8000b98 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f7ff fbb0 	bl	8000b98 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e0cb      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	4b49      	ldr	r3, [pc, #292]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0ee      	beq.n	8001434 <HAL_RCC_OscConfig+0x334>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fb9e 	bl	8000b98 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	e00a      	b.n	8001476 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff fb9a 	bl	8000b98 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e0b5      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	4b3e      	ldr	r3, [pc, #248]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ee      	bne.n	8001460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	4a38      	ldr	r2, [pc, #224]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a1 	beq.w	80015e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149e:	4b34      	ldr	r3, [pc, #208]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d05c      	beq.n	8001564 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d141      	bne.n	8001536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <HAL_RCC_OscConfig+0x478>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb6e 	bl	8000b98 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fb6a 	bl	8000b98 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e087      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	019b      	lsls	r3, r3, #6
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	3b01      	subs	r3, #1
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	491b      	ldr	r1, [pc, #108]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x478>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fb43 	bl	8000b98 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fb3f 	bl	8000b98 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e05c      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x416>
 8001534:	e054      	b.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_RCC_OscConfig+0x478>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb2c 	bl	8000b98 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fb28 	bl	8000b98 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e045      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_RCC_OscConfig+0x470>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x444>
 8001562:	e03d      	b.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e038      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000
 8001578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_RCC_OscConfig+0x4ec>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d028      	beq.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d121      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015ac:	4013      	ands	r3, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d111      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cc      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b68      	ldr	r3, [pc, #416]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d90c      	bls.n	800162c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b65      	ldr	r3, [pc, #404]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a58      	ldr	r2, [pc, #352]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800164e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d044      	beq.n	8001710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e067      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ce:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 0203 	bic.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4934      	ldr	r1, [pc, #208]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fa5a 	bl	8000b98 <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff fa56 	bl	8000b98 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 020c 	and.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d1eb      	bne.n	80016e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20c      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490a      	ldr	r1, [pc, #40]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	@ (80017b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f9ba 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	08002ff0 	.word	0x08002ff0
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b090      	sub	sp, #64	@ 0x40
 80017c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d4:	4b59      	ldr	r3, [pc, #356]	@ (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d00d      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x40>
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	f200 80a1 	bhi.w	8001928 <HAL_RCC_GetSysClockFreq+0x16c>
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ee:	e09b      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x184>)
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017f4:	e09b      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f6:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x188>)
 80017f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017fa:	e098      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017fc:	4b4f      	ldr	r3, [pc, #316]	@ (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001804:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001806:	4b4d      	ldr	r3, [pc, #308]	@ (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d028      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b4a      	ldr	r3, [pc, #296]	@ (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	2200      	movs	r2, #0
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	627a      	str	r2, [r7, #36]	@ 0x24
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001824:	2100      	movs	r1, #0
 8001826:	4b47      	ldr	r3, [pc, #284]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x188>)
 8001828:	fb03 f201 	mul.w	r2, r3, r1
 800182c:	2300      	movs	r3, #0
 800182e:	fb00 f303 	mul.w	r3, r0, r3
 8001832:	4413      	add	r3, r2
 8001834:	4a43      	ldr	r2, [pc, #268]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x188>)
 8001836:	fba0 1202 	umull	r1, r2, r0, r2
 800183a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800183c:	460a      	mov	r2, r1
 800183e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001842:	4413      	add	r3, r2
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001848:	2200      	movs	r2, #0
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	61fa      	str	r2, [r7, #28]
 800184e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001852:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001856:	f7fe fd1b 	bl	8000290 <__aeabi_uldivmod>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4613      	mov	r3, r2
 8001860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001862:	e053      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001864:	4b35      	ldr	r3, [pc, #212]	@ (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	2200      	movs	r2, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	617a      	str	r2, [r7, #20]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001876:	f04f 0b00 	mov.w	fp, #0
 800187a:	4652      	mov	r2, sl
 800187c:	465b      	mov	r3, fp
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0159      	lsls	r1, r3, #5
 8001888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188c:	0150      	lsls	r0, r2, #5
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ebb2 080a 	subs.w	r8, r2, sl
 8001896:	eb63 090b 	sbc.w	r9, r3, fp
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018ae:	ebb2 0408 	subs.w	r4, r2, r8
 80018b2:	eb63 0509 	sbc.w	r5, r3, r9
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	00eb      	lsls	r3, r5, #3
 80018c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c4:	00e2      	lsls	r2, r4, #3
 80018c6:	4614      	mov	r4, r2
 80018c8:	461d      	mov	r5, r3
 80018ca:	eb14 030a 	adds.w	r3, r4, sl
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	eb45 030b 	adc.w	r3, r5, fp
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e2:	4629      	mov	r1, r5
 80018e4:	028b      	lsls	r3, r1, #10
 80018e6:	4621      	mov	r1, r4
 80018e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018ec:	4621      	mov	r1, r4
 80018ee:	028a      	lsls	r2, r1, #10
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f6:	2200      	movs	r2, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	60fa      	str	r2, [r7, #12]
 80018fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001900:	f7fe fcc6 	bl	8000290 <__aeabi_uldivmod>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4613      	mov	r3, r2
 800190a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	3301      	adds	r3, #1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800191c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800191e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001926:	e002      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x184>)
 800192a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800192c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001930:	4618      	mov	r0, r3
 8001932:	3740      	adds	r7, #64	@ 0x40
 8001934:	46bd      	mov	sp, r7
 8001936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	00f42400 	.word	0x00f42400
 8001944:	017d7840 	.word	0x017d7840

08001948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <HAL_RCC_GetHCLKFreq+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000000 	.word	0x20000000

08001960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001964:	f7ff fff0 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0a9b      	lsrs	r3, r3, #10
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4903      	ldr	r1, [pc, #12]	@ (8001984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	08003000 	.word	0x08003000

08001988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800198c:	f7ff ffdc 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	0b5b      	lsrs	r3, r3, #13
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4903      	ldr	r1, [pc, #12]	@ (80019ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	08003000 	.word	0x08003000

080019b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e042      	b.n	8001a48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7fe ff8e 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2224      	movs	r2, #36	@ 0x24
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fa09 	bl	8001e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695a      	ldr	r2, [r3, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d175      	bne.n	8001b5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_UART_Transmit+0x2c>
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e06e      	b.n	8001b5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2221      	movs	r2, #33	@ 0x21
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a8e:	f7ff f883 	bl	8000b98 <HAL_GetTick>
 8001a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aa8:	d108      	bne.n	8001abc <HAL_UART_Transmit+0x6c>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d104      	bne.n	8001abc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e003      	b.n	8001ac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ac4:	e02e      	b.n	8001b24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2180      	movs	r1, #128	@ 0x80
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f8df 	bl	8001c94 <UART_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e03a      	b.n	8001b5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10b      	bne.n	8001b06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	3302      	adds	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	e007      	b.n	8001b16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3301      	adds	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1cb      	bne.n	8001ac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	2140      	movs	r1, #64	@ 0x40
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f8ab 	bl	8001c94 <UART_WaitOnFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e006      	b.n	8001b5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e000      	b.n	8001b5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b5c:	2302      	movs	r3, #2
  }
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b08a      	sub	sp, #40	@ 0x28
 8001b6a:	af02      	add	r7, sp, #8
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	f040 8081 	bne.w	8001c8a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_UART_Receive+0x2e>
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e079      	b.n	8001c8c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2222      	movs	r2, #34	@ 0x22
 8001ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bac:	f7fe fff4 	bl	8000b98 <HAL_GetTick>
 8001bb0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	88fa      	ldrh	r2, [r7, #6]
 8001bb6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bc6:	d108      	bne.n	8001bda <HAL_UART_Receive+0x74>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d104      	bne.n	8001bda <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	e003      	b.n	8001be2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001be2:	e047      	b.n	8001c74 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2200      	movs	r2, #0
 8001bec:	2120      	movs	r1, #32
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f850 	bl	8001c94 <UART_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e042      	b.n	8001c8c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10c      	bne.n	8001c26 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	3302      	adds	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	e01f      	b.n	8001c66 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c2e:	d007      	beq.n	8001c40 <HAL_UART_Receive+0xda>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_UART_Receive+0xe8>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	e008      	b.n	8001c60 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	3301      	adds	r3, #1
 8001c64:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1b2      	bne.n	8001be4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2220      	movs	r2, #32
 8001c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
  }
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ca4:	e03b      	b.n	8001d1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d037      	beq.n	8001d1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cae:	f7fe ff73 	bl	8000b98 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	6a3a      	ldr	r2, [r7, #32]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d302      	bcc.n	8001cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e03a      	b.n	8001d3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d023      	beq.n	8001d1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b80      	cmp	r3, #128	@ 0x80
 8001cda:	d020      	beq.n	8001d1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b40      	cmp	r3, #64	@ 0x40
 8001ce0:	d01d      	beq.n	8001d1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d116      	bne.n	8001d1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f81d 	bl	8001d46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2208      	movs	r2, #8
 8001d10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4013      	ands	r3, r2
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	bf0c      	ite	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	2300      	movne	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d0b4      	beq.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b095      	sub	sp, #84	@ 0x54
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	330c      	adds	r3, #12
 8001d54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d58:	e853 3f00 	ldrex	r3, [r3]
 8001d5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	330c      	adds	r3, #12
 8001d6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d76:	e841 2300 	strex	r3, r2, [r1]
 8001d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1e5      	bne.n	8001d4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3314      	adds	r3, #20
 8001d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	e853 3f00 	ldrex	r3, [r3]
 8001d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3314      	adds	r3, #20
 8001da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001daa:	e841 2300 	strex	r3, r2, [r1]
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1e5      	bne.n	8001d82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d119      	bne.n	8001df2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	330c      	adds	r3, #12
 8001dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	e853 3f00 	ldrex	r3, [r3]
 8001dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f023 0310 	bic.w	r3, r3, #16
 8001dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	330c      	adds	r3, #12
 8001ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dde:	61ba      	str	r2, [r7, #24]
 8001de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001de2:	6979      	ldr	r1, [r7, #20]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	e841 2300 	strex	r3, r2, [r1]
 8001dea:	613b      	str	r3, [r7, #16]
   return(result);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e5      	bne.n	8001dbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e00:	bf00      	nop
 8001e02:	3754      	adds	r7, #84	@ 0x54
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e10:	b0c0      	sub	sp, #256	@ 0x100
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e28:	68d9      	ldr	r1, [r3, #12]
 8001e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	ea40 0301 	orr.w	r3, r0, r1
 8001e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001e64:	f021 010c 	bic.w	r1, r1, #12
 8001e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e72:	430b      	orrs	r3, r1
 8001e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e86:	6999      	ldr	r1, [r3, #24]
 8001e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	ea40 0301 	orr.w	r3, r0, r1
 8001e92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b8f      	ldr	r3, [pc, #572]	@ (80020d8 <UART_SetConfig+0x2cc>)
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d005      	beq.n	8001eac <UART_SetConfig+0xa0>
 8001ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80020dc <UART_SetConfig+0x2d0>)
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d104      	bne.n	8001eb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001eac:	f7ff fd6c 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
 8001eb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001eb4:	e003      	b.n	8001ebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001eb6:	f7ff fd53 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8001eba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ec8:	f040 810c 	bne.w	80020e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001eda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001ede:	4622      	mov	r2, r4
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	1891      	adds	r1, r2, r2
 8001ee4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ee6:	415b      	adcs	r3, r3
 8001ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001eea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001eee:	4621      	mov	r1, r4
 8001ef0:	eb12 0801 	adds.w	r8, r2, r1
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	eb43 0901 	adc.w	r9, r3, r1
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f0e:	4690      	mov	r8, r2
 8001f10:	4699      	mov	r9, r3
 8001f12:	4623      	mov	r3, r4
 8001f14:	eb18 0303 	adds.w	r3, r8, r3
 8001f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f1c:	462b      	mov	r3, r5
 8001f1e:	eb49 0303 	adc.w	r3, r9, r3
 8001f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	18db      	adds	r3, r3, r3
 8001f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f40:	4613      	mov	r3, r2
 8001f42:	eb42 0303 	adc.w	r3, r2, r3
 8001f46:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f50:	f7fe f99e 	bl	8000290 <__aeabi_uldivmod>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4b61      	ldr	r3, [pc, #388]	@ (80020e0 <UART_SetConfig+0x2d4>)
 8001f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	011c      	lsls	r4, r3, #4
 8001f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f66:	2200      	movs	r2, #0
 8001f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001f70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001f74:	4642      	mov	r2, r8
 8001f76:	464b      	mov	r3, r9
 8001f78:	1891      	adds	r1, r2, r2
 8001f7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001f7c:	415b      	adcs	r3, r3
 8001f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f84:	4641      	mov	r1, r8
 8001f86:	eb12 0a01 	adds.w	sl, r2, r1
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	eb43 0b01 	adc.w	fp, r3, r1
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fa4:	4692      	mov	sl, r2
 8001fa6:	469b      	mov	fp, r3
 8001fa8:	4643      	mov	r3, r8
 8001faa:	eb1a 0303 	adds.w	r3, sl, r3
 8001fae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8001fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001fc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001fcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	18db      	adds	r3, r3, r3
 8001fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	eb42 0303 	adc.w	r3, r2, r3
 8001fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001fe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001fe6:	f7fe f953 	bl	8000290 <__aeabi_uldivmod>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <UART_SetConfig+0x2d4>)
 8001ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2264      	movs	r2, #100	@ 0x64
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	1acb      	subs	r3, r1, r3
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002006:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <UART_SetConfig+0x2d4>)
 8002008:	fba3 2302 	umull	r2, r3, r3, r2
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002014:	441c      	add	r4, r3
 8002016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800201a:	2200      	movs	r2, #0
 800201c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002020:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002028:	4642      	mov	r2, r8
 800202a:	464b      	mov	r3, r9
 800202c:	1891      	adds	r1, r2, r2
 800202e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002030:	415b      	adcs	r3, r3
 8002032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002038:	4641      	mov	r1, r8
 800203a:	1851      	adds	r1, r2, r1
 800203c:	6339      	str	r1, [r7, #48]	@ 0x30
 800203e:	4649      	mov	r1, r9
 8002040:	414b      	adcs	r3, r1
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002050:	4659      	mov	r1, fp
 8002052:	00cb      	lsls	r3, r1, #3
 8002054:	4651      	mov	r1, sl
 8002056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800205a:	4651      	mov	r1, sl
 800205c:	00ca      	lsls	r2, r1, #3
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	4603      	mov	r3, r0
 8002064:	4642      	mov	r2, r8
 8002066:	189b      	adds	r3, r3, r2
 8002068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800206c:	464b      	mov	r3, r9
 800206e:	460a      	mov	r2, r1
 8002070:	eb42 0303 	adc.w	r3, r2, r3
 8002074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002084:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800208c:	460b      	mov	r3, r1
 800208e:	18db      	adds	r3, r3, r3
 8002090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002092:	4613      	mov	r3, r2
 8002094:	eb42 0303 	adc.w	r3, r2, r3
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800209a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800209e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80020a2:	f7fe f8f5 	bl	8000290 <__aeabi_uldivmod>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <UART_SetConfig+0x2d4>)
 80020ac:	fba3 1302 	umull	r1, r3, r3, r2
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	2164      	movs	r1, #100	@ 0x64
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	3332      	adds	r3, #50	@ 0x32
 80020be:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <UART_SetConfig+0x2d4>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	f003 0207 	and.w	r2, r3, #7
 80020ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4422      	add	r2, r4
 80020d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020d4:	e106      	b.n	80022e4 <UART_SetConfig+0x4d8>
 80020d6:	bf00      	nop
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40011400 	.word	0x40011400
 80020e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80020ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80020f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80020f6:	4642      	mov	r2, r8
 80020f8:	464b      	mov	r3, r9
 80020fa:	1891      	adds	r1, r2, r2
 80020fc:	6239      	str	r1, [r7, #32]
 80020fe:	415b      	adcs	r3, r3
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
 8002102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002106:	4641      	mov	r1, r8
 8002108:	1854      	adds	r4, r2, r1
 800210a:	4649      	mov	r1, r9
 800210c:	eb43 0501 	adc.w	r5, r3, r1
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	00eb      	lsls	r3, r5, #3
 800211a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800211e:	00e2      	lsls	r2, r4, #3
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	4643      	mov	r3, r8
 8002126:	18e3      	adds	r3, r4, r3
 8002128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800212c:	464b      	mov	r3, r9
 800212e:	eb45 0303 	adc.w	r3, r5, r3
 8002132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002142:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002152:	4629      	mov	r1, r5
 8002154:	008b      	lsls	r3, r1, #2
 8002156:	4621      	mov	r1, r4
 8002158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800215c:	4621      	mov	r1, r4
 800215e:	008a      	lsls	r2, r1, #2
 8002160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002164:	f7fe f894 	bl	8000290 <__aeabi_uldivmod>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4b60      	ldr	r3, [pc, #384]	@ (80022f0 <UART_SetConfig+0x4e4>)
 800216e:	fba3 2302 	umull	r2, r3, r3, r2
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	011c      	lsls	r4, r3, #4
 8002176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800217a:	2200      	movs	r2, #0
 800217c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002180:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002188:	4642      	mov	r2, r8
 800218a:	464b      	mov	r3, r9
 800218c:	1891      	adds	r1, r2, r2
 800218e:	61b9      	str	r1, [r7, #24]
 8002190:	415b      	adcs	r3, r3
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002198:	4641      	mov	r1, r8
 800219a:	1851      	adds	r1, r2, r1
 800219c:	6139      	str	r1, [r7, #16]
 800219e:	4649      	mov	r1, r9
 80021a0:	414b      	adcs	r3, r1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021b0:	4659      	mov	r1, fp
 80021b2:	00cb      	lsls	r3, r1, #3
 80021b4:	4651      	mov	r1, sl
 80021b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ba:	4651      	mov	r1, sl
 80021bc:	00ca      	lsls	r2, r1, #3
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	4642      	mov	r2, r8
 80021c6:	189b      	adds	r3, r3, r2
 80021c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021cc:	464b      	mov	r3, r9
 80021ce:	460a      	mov	r2, r1
 80021d0:	eb42 0303 	adc.w	r3, r2, r3
 80021d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80021f0:	4649      	mov	r1, r9
 80021f2:	008b      	lsls	r3, r1, #2
 80021f4:	4641      	mov	r1, r8
 80021f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021fa:	4641      	mov	r1, r8
 80021fc:	008a      	lsls	r2, r1, #2
 80021fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002202:	f7fe f845 	bl	8000290 <__aeabi_uldivmod>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4611      	mov	r1, r2
 800220c:	4b38      	ldr	r3, [pc, #224]	@ (80022f0 <UART_SetConfig+0x4e4>)
 800220e:	fba3 2301 	umull	r2, r3, r3, r1
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	2264      	movs	r2, #100	@ 0x64
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	1acb      	subs	r3, r1, r3
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	3332      	adds	r3, #50	@ 0x32
 8002220:	4a33      	ldr	r2, [pc, #204]	@ (80022f0 <UART_SetConfig+0x4e4>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800222c:	441c      	add	r4, r3
 800222e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002232:	2200      	movs	r2, #0
 8002234:	673b      	str	r3, [r7, #112]	@ 0x70
 8002236:	677a      	str	r2, [r7, #116]	@ 0x74
 8002238:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800223c:	4642      	mov	r2, r8
 800223e:	464b      	mov	r3, r9
 8002240:	1891      	adds	r1, r2, r2
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	415b      	adcs	r3, r3
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800224c:	4641      	mov	r1, r8
 800224e:	1851      	adds	r1, r2, r1
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	4649      	mov	r1, r9
 8002254:	414b      	adcs	r3, r1
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002264:	4659      	mov	r1, fp
 8002266:	00cb      	lsls	r3, r1, #3
 8002268:	4651      	mov	r1, sl
 800226a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800226e:	4651      	mov	r1, sl
 8002270:	00ca      	lsls	r2, r1, #3
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	4603      	mov	r3, r0
 8002278:	4642      	mov	r2, r8
 800227a:	189b      	adds	r3, r3, r2
 800227c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800227e:	464b      	mov	r3, r9
 8002280:	460a      	mov	r2, r1
 8002282:	eb42 0303 	adc.w	r3, r2, r3
 8002286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	663b      	str	r3, [r7, #96]	@ 0x60
 8002292:	667a      	str	r2, [r7, #100]	@ 0x64
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80022a0:	4649      	mov	r1, r9
 80022a2:	008b      	lsls	r3, r1, #2
 80022a4:	4641      	mov	r1, r8
 80022a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022aa:	4641      	mov	r1, r8
 80022ac:	008a      	lsls	r2, r1, #2
 80022ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80022b2:	f7fd ffed 	bl	8000290 <__aeabi_uldivmod>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <UART_SetConfig+0x4e4>)
 80022bc:	fba3 1302 	umull	r1, r3, r3, r2
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	2164      	movs	r1, #100	@ 0x64
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	3332      	adds	r3, #50	@ 0x32
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <UART_SetConfig+0x4e4>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	f003 020f 	and.w	r2, r3, #15
 80022da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4422      	add	r2, r4
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80022ea:	46bd      	mov	sp, r7
 80022ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f0:	51eb851f 	.word	0x51eb851f

080022f4 <siprintf>:
 80022f4:	b40e      	push	{r1, r2, r3}
 80022f6:	b510      	push	{r4, lr}
 80022f8:	b09d      	sub	sp, #116	@ 0x74
 80022fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80022fc:	9002      	str	r0, [sp, #8]
 80022fe:	9006      	str	r0, [sp, #24]
 8002300:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002304:	480a      	ldr	r0, [pc, #40]	@ (8002330 <siprintf+0x3c>)
 8002306:	9107      	str	r1, [sp, #28]
 8002308:	9104      	str	r1, [sp, #16]
 800230a:	490a      	ldr	r1, [pc, #40]	@ (8002334 <siprintf+0x40>)
 800230c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002310:	9105      	str	r1, [sp, #20]
 8002312:	2400      	movs	r4, #0
 8002314:	a902      	add	r1, sp, #8
 8002316:	6800      	ldr	r0, [r0, #0]
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800231c:	f000 f9a2 	bl	8002664 <_svfiprintf_r>
 8002320:	9b02      	ldr	r3, [sp, #8]
 8002322:	701c      	strb	r4, [r3, #0]
 8002324:	b01d      	add	sp, #116	@ 0x74
 8002326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800232a:	b003      	add	sp, #12
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000000c 	.word	0x2000000c
 8002334:	ffff0208 	.word	0xffff0208

08002338 <memset>:
 8002338:	4402      	add	r2, r0
 800233a:	4603      	mov	r3, r0
 800233c:	4293      	cmp	r3, r2
 800233e:	d100      	bne.n	8002342 <memset+0xa>
 8002340:	4770      	bx	lr
 8002342:	f803 1b01 	strb.w	r1, [r3], #1
 8002346:	e7f9      	b.n	800233c <memset+0x4>

08002348 <__errno>:
 8002348:	4b01      	ldr	r3, [pc, #4]	@ (8002350 <__errno+0x8>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000000c 	.word	0x2000000c

08002354 <__libc_init_array>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	4d0d      	ldr	r5, [pc, #52]	@ (800238c <__libc_init_array+0x38>)
 8002358:	4c0d      	ldr	r4, [pc, #52]	@ (8002390 <__libc_init_array+0x3c>)
 800235a:	1b64      	subs	r4, r4, r5
 800235c:	10a4      	asrs	r4, r4, #2
 800235e:	2600      	movs	r6, #0
 8002360:	42a6      	cmp	r6, r4
 8002362:	d109      	bne.n	8002378 <__libc_init_array+0x24>
 8002364:	4d0b      	ldr	r5, [pc, #44]	@ (8002394 <__libc_init_array+0x40>)
 8002366:	4c0c      	ldr	r4, [pc, #48]	@ (8002398 <__libc_init_array+0x44>)
 8002368:	f000 fc64 	bl	8002c34 <_init>
 800236c:	1b64      	subs	r4, r4, r5
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	2600      	movs	r6, #0
 8002372:	42a6      	cmp	r6, r4
 8002374:	d105      	bne.n	8002382 <__libc_init_array+0x2e>
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	f855 3b04 	ldr.w	r3, [r5], #4
 800237c:	4798      	blx	r3
 800237e:	3601      	adds	r6, #1
 8002380:	e7ee      	b.n	8002360 <__libc_init_array+0xc>
 8002382:	f855 3b04 	ldr.w	r3, [r5], #4
 8002386:	4798      	blx	r3
 8002388:	3601      	adds	r6, #1
 800238a:	e7f2      	b.n	8002372 <__libc_init_array+0x1e>
 800238c:	08003044 	.word	0x08003044
 8002390:	08003044 	.word	0x08003044
 8002394:	08003044 	.word	0x08003044
 8002398:	08003048 	.word	0x08003048

0800239c <__retarget_lock_acquire_recursive>:
 800239c:	4770      	bx	lr

0800239e <__retarget_lock_release_recursive>:
 800239e:	4770      	bx	lr

080023a0 <memcpy>:
 80023a0:	440a      	add	r2, r1
 80023a2:	4291      	cmp	r1, r2
 80023a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80023a8:	d100      	bne.n	80023ac <memcpy+0xc>
 80023aa:	4770      	bx	lr
 80023ac:	b510      	push	{r4, lr}
 80023ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023b6:	4291      	cmp	r1, r2
 80023b8:	d1f9      	bne.n	80023ae <memcpy+0xe>
 80023ba:	bd10      	pop	{r4, pc}

080023bc <_free_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4605      	mov	r5, r0
 80023c0:	2900      	cmp	r1, #0
 80023c2:	d041      	beq.n	8002448 <_free_r+0x8c>
 80023c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023c8:	1f0c      	subs	r4, r1, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bfb8      	it	lt
 80023ce:	18e4      	addlt	r4, r4, r3
 80023d0:	f000 f8e0 	bl	8002594 <__malloc_lock>
 80023d4:	4a1d      	ldr	r2, [pc, #116]	@ (800244c <_free_r+0x90>)
 80023d6:	6813      	ldr	r3, [r2, #0]
 80023d8:	b933      	cbnz	r3, 80023e8 <_free_r+0x2c>
 80023da:	6063      	str	r3, [r4, #4]
 80023dc:	6014      	str	r4, [r2, #0]
 80023de:	4628      	mov	r0, r5
 80023e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023e4:	f000 b8dc 	b.w	80025a0 <__malloc_unlock>
 80023e8:	42a3      	cmp	r3, r4
 80023ea:	d908      	bls.n	80023fe <_free_r+0x42>
 80023ec:	6820      	ldr	r0, [r4, #0]
 80023ee:	1821      	adds	r1, r4, r0
 80023f0:	428b      	cmp	r3, r1
 80023f2:	bf01      	itttt	eq
 80023f4:	6819      	ldreq	r1, [r3, #0]
 80023f6:	685b      	ldreq	r3, [r3, #4]
 80023f8:	1809      	addeq	r1, r1, r0
 80023fa:	6021      	streq	r1, [r4, #0]
 80023fc:	e7ed      	b.n	80023da <_free_r+0x1e>
 80023fe:	461a      	mov	r2, r3
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	b10b      	cbz	r3, 8002408 <_free_r+0x4c>
 8002404:	42a3      	cmp	r3, r4
 8002406:	d9fa      	bls.n	80023fe <_free_r+0x42>
 8002408:	6811      	ldr	r1, [r2, #0]
 800240a:	1850      	adds	r0, r2, r1
 800240c:	42a0      	cmp	r0, r4
 800240e:	d10b      	bne.n	8002428 <_free_r+0x6c>
 8002410:	6820      	ldr	r0, [r4, #0]
 8002412:	4401      	add	r1, r0
 8002414:	1850      	adds	r0, r2, r1
 8002416:	4283      	cmp	r3, r0
 8002418:	6011      	str	r1, [r2, #0]
 800241a:	d1e0      	bne.n	80023de <_free_r+0x22>
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	6053      	str	r3, [r2, #4]
 8002422:	4408      	add	r0, r1
 8002424:	6010      	str	r0, [r2, #0]
 8002426:	e7da      	b.n	80023de <_free_r+0x22>
 8002428:	d902      	bls.n	8002430 <_free_r+0x74>
 800242a:	230c      	movs	r3, #12
 800242c:	602b      	str	r3, [r5, #0]
 800242e:	e7d6      	b.n	80023de <_free_r+0x22>
 8002430:	6820      	ldr	r0, [r4, #0]
 8002432:	1821      	adds	r1, r4, r0
 8002434:	428b      	cmp	r3, r1
 8002436:	bf04      	itt	eq
 8002438:	6819      	ldreq	r1, [r3, #0]
 800243a:	685b      	ldreq	r3, [r3, #4]
 800243c:	6063      	str	r3, [r4, #4]
 800243e:	bf04      	itt	eq
 8002440:	1809      	addeq	r1, r1, r0
 8002442:	6021      	streq	r1, [r4, #0]
 8002444:	6054      	str	r4, [r2, #4]
 8002446:	e7ca      	b.n	80023de <_free_r+0x22>
 8002448:	bd38      	pop	{r3, r4, r5, pc}
 800244a:	bf00      	nop
 800244c:	2000020c 	.word	0x2000020c

08002450 <sbrk_aligned>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	4e0f      	ldr	r6, [pc, #60]	@ (8002490 <sbrk_aligned+0x40>)
 8002454:	460c      	mov	r4, r1
 8002456:	6831      	ldr	r1, [r6, #0]
 8002458:	4605      	mov	r5, r0
 800245a:	b911      	cbnz	r1, 8002462 <sbrk_aligned+0x12>
 800245c:	f000 fba4 	bl	8002ba8 <_sbrk_r>
 8002460:	6030      	str	r0, [r6, #0]
 8002462:	4621      	mov	r1, r4
 8002464:	4628      	mov	r0, r5
 8002466:	f000 fb9f 	bl	8002ba8 <_sbrk_r>
 800246a:	1c43      	adds	r3, r0, #1
 800246c:	d103      	bne.n	8002476 <sbrk_aligned+0x26>
 800246e:	f04f 34ff 	mov.w	r4, #4294967295
 8002472:	4620      	mov	r0, r4
 8002474:	bd70      	pop	{r4, r5, r6, pc}
 8002476:	1cc4      	adds	r4, r0, #3
 8002478:	f024 0403 	bic.w	r4, r4, #3
 800247c:	42a0      	cmp	r0, r4
 800247e:	d0f8      	beq.n	8002472 <sbrk_aligned+0x22>
 8002480:	1a21      	subs	r1, r4, r0
 8002482:	4628      	mov	r0, r5
 8002484:	f000 fb90 	bl	8002ba8 <_sbrk_r>
 8002488:	3001      	adds	r0, #1
 800248a:	d1f2      	bne.n	8002472 <sbrk_aligned+0x22>
 800248c:	e7ef      	b.n	800246e <sbrk_aligned+0x1e>
 800248e:	bf00      	nop
 8002490:	20000208 	.word	0x20000208

08002494 <_malloc_r>:
 8002494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002498:	1ccd      	adds	r5, r1, #3
 800249a:	f025 0503 	bic.w	r5, r5, #3
 800249e:	3508      	adds	r5, #8
 80024a0:	2d0c      	cmp	r5, #12
 80024a2:	bf38      	it	cc
 80024a4:	250c      	movcc	r5, #12
 80024a6:	2d00      	cmp	r5, #0
 80024a8:	4606      	mov	r6, r0
 80024aa:	db01      	blt.n	80024b0 <_malloc_r+0x1c>
 80024ac:	42a9      	cmp	r1, r5
 80024ae:	d904      	bls.n	80024ba <_malloc_r+0x26>
 80024b0:	230c      	movs	r3, #12
 80024b2:	6033      	str	r3, [r6, #0]
 80024b4:	2000      	movs	r0, #0
 80024b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002590 <_malloc_r+0xfc>
 80024be:	f000 f869 	bl	8002594 <__malloc_lock>
 80024c2:	f8d8 3000 	ldr.w	r3, [r8]
 80024c6:	461c      	mov	r4, r3
 80024c8:	bb44      	cbnz	r4, 800251c <_malloc_r+0x88>
 80024ca:	4629      	mov	r1, r5
 80024cc:	4630      	mov	r0, r6
 80024ce:	f7ff ffbf 	bl	8002450 <sbrk_aligned>
 80024d2:	1c43      	adds	r3, r0, #1
 80024d4:	4604      	mov	r4, r0
 80024d6:	d158      	bne.n	800258a <_malloc_r+0xf6>
 80024d8:	f8d8 4000 	ldr.w	r4, [r8]
 80024dc:	4627      	mov	r7, r4
 80024de:	2f00      	cmp	r7, #0
 80024e0:	d143      	bne.n	800256a <_malloc_r+0xd6>
 80024e2:	2c00      	cmp	r4, #0
 80024e4:	d04b      	beq.n	800257e <_malloc_r+0xea>
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	4639      	mov	r1, r7
 80024ea:	4630      	mov	r0, r6
 80024ec:	eb04 0903 	add.w	r9, r4, r3
 80024f0:	f000 fb5a 	bl	8002ba8 <_sbrk_r>
 80024f4:	4581      	cmp	r9, r0
 80024f6:	d142      	bne.n	800257e <_malloc_r+0xea>
 80024f8:	6821      	ldr	r1, [r4, #0]
 80024fa:	1a6d      	subs	r5, r5, r1
 80024fc:	4629      	mov	r1, r5
 80024fe:	4630      	mov	r0, r6
 8002500:	f7ff ffa6 	bl	8002450 <sbrk_aligned>
 8002504:	3001      	adds	r0, #1
 8002506:	d03a      	beq.n	800257e <_malloc_r+0xea>
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	442b      	add	r3, r5
 800250c:	6023      	str	r3, [r4, #0]
 800250e:	f8d8 3000 	ldr.w	r3, [r8]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	bb62      	cbnz	r2, 8002570 <_malloc_r+0xdc>
 8002516:	f8c8 7000 	str.w	r7, [r8]
 800251a:	e00f      	b.n	800253c <_malloc_r+0xa8>
 800251c:	6822      	ldr	r2, [r4, #0]
 800251e:	1b52      	subs	r2, r2, r5
 8002520:	d420      	bmi.n	8002564 <_malloc_r+0xd0>
 8002522:	2a0b      	cmp	r2, #11
 8002524:	d917      	bls.n	8002556 <_malloc_r+0xc2>
 8002526:	1961      	adds	r1, r4, r5
 8002528:	42a3      	cmp	r3, r4
 800252a:	6025      	str	r5, [r4, #0]
 800252c:	bf18      	it	ne
 800252e:	6059      	strne	r1, [r3, #4]
 8002530:	6863      	ldr	r3, [r4, #4]
 8002532:	bf08      	it	eq
 8002534:	f8c8 1000 	streq.w	r1, [r8]
 8002538:	5162      	str	r2, [r4, r5]
 800253a:	604b      	str	r3, [r1, #4]
 800253c:	4630      	mov	r0, r6
 800253e:	f000 f82f 	bl	80025a0 <__malloc_unlock>
 8002542:	f104 000b 	add.w	r0, r4, #11
 8002546:	1d23      	adds	r3, r4, #4
 8002548:	f020 0007 	bic.w	r0, r0, #7
 800254c:	1ac2      	subs	r2, r0, r3
 800254e:	bf1c      	itt	ne
 8002550:	1a1b      	subne	r3, r3, r0
 8002552:	50a3      	strne	r3, [r4, r2]
 8002554:	e7af      	b.n	80024b6 <_malloc_r+0x22>
 8002556:	6862      	ldr	r2, [r4, #4]
 8002558:	42a3      	cmp	r3, r4
 800255a:	bf0c      	ite	eq
 800255c:	f8c8 2000 	streq.w	r2, [r8]
 8002560:	605a      	strne	r2, [r3, #4]
 8002562:	e7eb      	b.n	800253c <_malloc_r+0xa8>
 8002564:	4623      	mov	r3, r4
 8002566:	6864      	ldr	r4, [r4, #4]
 8002568:	e7ae      	b.n	80024c8 <_malloc_r+0x34>
 800256a:	463c      	mov	r4, r7
 800256c:	687f      	ldr	r7, [r7, #4]
 800256e:	e7b6      	b.n	80024de <_malloc_r+0x4a>
 8002570:	461a      	mov	r2, r3
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	42a3      	cmp	r3, r4
 8002576:	d1fb      	bne.n	8002570 <_malloc_r+0xdc>
 8002578:	2300      	movs	r3, #0
 800257a:	6053      	str	r3, [r2, #4]
 800257c:	e7de      	b.n	800253c <_malloc_r+0xa8>
 800257e:	230c      	movs	r3, #12
 8002580:	6033      	str	r3, [r6, #0]
 8002582:	4630      	mov	r0, r6
 8002584:	f000 f80c 	bl	80025a0 <__malloc_unlock>
 8002588:	e794      	b.n	80024b4 <_malloc_r+0x20>
 800258a:	6005      	str	r5, [r0, #0]
 800258c:	e7d6      	b.n	800253c <_malloc_r+0xa8>
 800258e:	bf00      	nop
 8002590:	2000020c 	.word	0x2000020c

08002594 <__malloc_lock>:
 8002594:	4801      	ldr	r0, [pc, #4]	@ (800259c <__malloc_lock+0x8>)
 8002596:	f7ff bf01 	b.w	800239c <__retarget_lock_acquire_recursive>
 800259a:	bf00      	nop
 800259c:	20000204 	.word	0x20000204

080025a0 <__malloc_unlock>:
 80025a0:	4801      	ldr	r0, [pc, #4]	@ (80025a8 <__malloc_unlock+0x8>)
 80025a2:	f7ff befc 	b.w	800239e <__retarget_lock_release_recursive>
 80025a6:	bf00      	nop
 80025a8:	20000204 	.word	0x20000204

080025ac <__ssputs_r>:
 80025ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025b0:	688e      	ldr	r6, [r1, #8]
 80025b2:	461f      	mov	r7, r3
 80025b4:	42be      	cmp	r6, r7
 80025b6:	680b      	ldr	r3, [r1, #0]
 80025b8:	4682      	mov	sl, r0
 80025ba:	460c      	mov	r4, r1
 80025bc:	4690      	mov	r8, r2
 80025be:	d82d      	bhi.n	800261c <__ssputs_r+0x70>
 80025c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80025c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80025c8:	d026      	beq.n	8002618 <__ssputs_r+0x6c>
 80025ca:	6965      	ldr	r5, [r4, #20]
 80025cc:	6909      	ldr	r1, [r1, #16]
 80025ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025d2:	eba3 0901 	sub.w	r9, r3, r1
 80025d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025da:	1c7b      	adds	r3, r7, #1
 80025dc:	444b      	add	r3, r9
 80025de:	106d      	asrs	r5, r5, #1
 80025e0:	429d      	cmp	r5, r3
 80025e2:	bf38      	it	cc
 80025e4:	461d      	movcc	r5, r3
 80025e6:	0553      	lsls	r3, r2, #21
 80025e8:	d527      	bpl.n	800263a <__ssputs_r+0x8e>
 80025ea:	4629      	mov	r1, r5
 80025ec:	f7ff ff52 	bl	8002494 <_malloc_r>
 80025f0:	4606      	mov	r6, r0
 80025f2:	b360      	cbz	r0, 800264e <__ssputs_r+0xa2>
 80025f4:	6921      	ldr	r1, [r4, #16]
 80025f6:	464a      	mov	r2, r9
 80025f8:	f7ff fed2 	bl	80023a0 <memcpy>
 80025fc:	89a3      	ldrh	r3, [r4, #12]
 80025fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002606:	81a3      	strh	r3, [r4, #12]
 8002608:	6126      	str	r6, [r4, #16]
 800260a:	6165      	str	r5, [r4, #20]
 800260c:	444e      	add	r6, r9
 800260e:	eba5 0509 	sub.w	r5, r5, r9
 8002612:	6026      	str	r6, [r4, #0]
 8002614:	60a5      	str	r5, [r4, #8]
 8002616:	463e      	mov	r6, r7
 8002618:	42be      	cmp	r6, r7
 800261a:	d900      	bls.n	800261e <__ssputs_r+0x72>
 800261c:	463e      	mov	r6, r7
 800261e:	6820      	ldr	r0, [r4, #0]
 8002620:	4632      	mov	r2, r6
 8002622:	4641      	mov	r1, r8
 8002624:	f000 faa6 	bl	8002b74 <memmove>
 8002628:	68a3      	ldr	r3, [r4, #8]
 800262a:	1b9b      	subs	r3, r3, r6
 800262c:	60a3      	str	r3, [r4, #8]
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	4433      	add	r3, r6
 8002632:	6023      	str	r3, [r4, #0]
 8002634:	2000      	movs	r0, #0
 8002636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800263a:	462a      	mov	r2, r5
 800263c:	f000 fac4 	bl	8002bc8 <_realloc_r>
 8002640:	4606      	mov	r6, r0
 8002642:	2800      	cmp	r0, #0
 8002644:	d1e0      	bne.n	8002608 <__ssputs_r+0x5c>
 8002646:	6921      	ldr	r1, [r4, #16]
 8002648:	4650      	mov	r0, sl
 800264a:	f7ff feb7 	bl	80023bc <_free_r>
 800264e:	230c      	movs	r3, #12
 8002650:	f8ca 3000 	str.w	r3, [sl]
 8002654:	89a3      	ldrh	r3, [r4, #12]
 8002656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800265a:	81a3      	strh	r3, [r4, #12]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	e7e9      	b.n	8002636 <__ssputs_r+0x8a>
	...

08002664 <_svfiprintf_r>:
 8002664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002668:	4698      	mov	r8, r3
 800266a:	898b      	ldrh	r3, [r1, #12]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	b09d      	sub	sp, #116	@ 0x74
 8002670:	4607      	mov	r7, r0
 8002672:	460d      	mov	r5, r1
 8002674:	4614      	mov	r4, r2
 8002676:	d510      	bpl.n	800269a <_svfiprintf_r+0x36>
 8002678:	690b      	ldr	r3, [r1, #16]
 800267a:	b973      	cbnz	r3, 800269a <_svfiprintf_r+0x36>
 800267c:	2140      	movs	r1, #64	@ 0x40
 800267e:	f7ff ff09 	bl	8002494 <_malloc_r>
 8002682:	6028      	str	r0, [r5, #0]
 8002684:	6128      	str	r0, [r5, #16]
 8002686:	b930      	cbnz	r0, 8002696 <_svfiprintf_r+0x32>
 8002688:	230c      	movs	r3, #12
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	b01d      	add	sp, #116	@ 0x74
 8002692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002696:	2340      	movs	r3, #64	@ 0x40
 8002698:	616b      	str	r3, [r5, #20]
 800269a:	2300      	movs	r3, #0
 800269c:	9309      	str	r3, [sp, #36]	@ 0x24
 800269e:	2320      	movs	r3, #32
 80026a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80026a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80026a8:	2330      	movs	r3, #48	@ 0x30
 80026aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002848 <_svfiprintf_r+0x1e4>
 80026ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026b2:	f04f 0901 	mov.w	r9, #1
 80026b6:	4623      	mov	r3, r4
 80026b8:	469a      	mov	sl, r3
 80026ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026be:	b10a      	cbz	r2, 80026c4 <_svfiprintf_r+0x60>
 80026c0:	2a25      	cmp	r2, #37	@ 0x25
 80026c2:	d1f9      	bne.n	80026b8 <_svfiprintf_r+0x54>
 80026c4:	ebba 0b04 	subs.w	fp, sl, r4
 80026c8:	d00b      	beq.n	80026e2 <_svfiprintf_r+0x7e>
 80026ca:	465b      	mov	r3, fp
 80026cc:	4622      	mov	r2, r4
 80026ce:	4629      	mov	r1, r5
 80026d0:	4638      	mov	r0, r7
 80026d2:	f7ff ff6b 	bl	80025ac <__ssputs_r>
 80026d6:	3001      	adds	r0, #1
 80026d8:	f000 80a7 	beq.w	800282a <_svfiprintf_r+0x1c6>
 80026dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80026de:	445a      	add	r2, fp
 80026e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80026e2:	f89a 3000 	ldrb.w	r3, [sl]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 809f 	beq.w	800282a <_svfiprintf_r+0x1c6>
 80026ec:	2300      	movs	r3, #0
 80026ee:	f04f 32ff 	mov.w	r2, #4294967295
 80026f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026f6:	f10a 0a01 	add.w	sl, sl, #1
 80026fa:	9304      	str	r3, [sp, #16]
 80026fc:	9307      	str	r3, [sp, #28]
 80026fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002702:	931a      	str	r3, [sp, #104]	@ 0x68
 8002704:	4654      	mov	r4, sl
 8002706:	2205      	movs	r2, #5
 8002708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800270c:	484e      	ldr	r0, [pc, #312]	@ (8002848 <_svfiprintf_r+0x1e4>)
 800270e:	f7fd fd6f 	bl	80001f0 <memchr>
 8002712:	9a04      	ldr	r2, [sp, #16]
 8002714:	b9d8      	cbnz	r0, 800274e <_svfiprintf_r+0xea>
 8002716:	06d0      	lsls	r0, r2, #27
 8002718:	bf44      	itt	mi
 800271a:	2320      	movmi	r3, #32
 800271c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002720:	0711      	lsls	r1, r2, #28
 8002722:	bf44      	itt	mi
 8002724:	232b      	movmi	r3, #43	@ 0x2b
 8002726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800272a:	f89a 3000 	ldrb.w	r3, [sl]
 800272e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002730:	d015      	beq.n	800275e <_svfiprintf_r+0xfa>
 8002732:	9a07      	ldr	r2, [sp, #28]
 8002734:	4654      	mov	r4, sl
 8002736:	2000      	movs	r0, #0
 8002738:	f04f 0c0a 	mov.w	ip, #10
 800273c:	4621      	mov	r1, r4
 800273e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002742:	3b30      	subs	r3, #48	@ 0x30
 8002744:	2b09      	cmp	r3, #9
 8002746:	d94b      	bls.n	80027e0 <_svfiprintf_r+0x17c>
 8002748:	b1b0      	cbz	r0, 8002778 <_svfiprintf_r+0x114>
 800274a:	9207      	str	r2, [sp, #28]
 800274c:	e014      	b.n	8002778 <_svfiprintf_r+0x114>
 800274e:	eba0 0308 	sub.w	r3, r0, r8
 8002752:	fa09 f303 	lsl.w	r3, r9, r3
 8002756:	4313      	orrs	r3, r2
 8002758:	9304      	str	r3, [sp, #16]
 800275a:	46a2      	mov	sl, r4
 800275c:	e7d2      	b.n	8002704 <_svfiprintf_r+0xa0>
 800275e:	9b03      	ldr	r3, [sp, #12]
 8002760:	1d19      	adds	r1, r3, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	9103      	str	r1, [sp, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	bfbb      	ittet	lt
 800276a:	425b      	neglt	r3, r3
 800276c:	f042 0202 	orrlt.w	r2, r2, #2
 8002770:	9307      	strge	r3, [sp, #28]
 8002772:	9307      	strlt	r3, [sp, #28]
 8002774:	bfb8      	it	lt
 8002776:	9204      	strlt	r2, [sp, #16]
 8002778:	7823      	ldrb	r3, [r4, #0]
 800277a:	2b2e      	cmp	r3, #46	@ 0x2e
 800277c:	d10a      	bne.n	8002794 <_svfiprintf_r+0x130>
 800277e:	7863      	ldrb	r3, [r4, #1]
 8002780:	2b2a      	cmp	r3, #42	@ 0x2a
 8002782:	d132      	bne.n	80027ea <_svfiprintf_r+0x186>
 8002784:	9b03      	ldr	r3, [sp, #12]
 8002786:	1d1a      	adds	r2, r3, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	9203      	str	r2, [sp, #12]
 800278c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002790:	3402      	adds	r4, #2
 8002792:	9305      	str	r3, [sp, #20]
 8002794:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002858 <_svfiprintf_r+0x1f4>
 8002798:	7821      	ldrb	r1, [r4, #0]
 800279a:	2203      	movs	r2, #3
 800279c:	4650      	mov	r0, sl
 800279e:	f7fd fd27 	bl	80001f0 <memchr>
 80027a2:	b138      	cbz	r0, 80027b4 <_svfiprintf_r+0x150>
 80027a4:	9b04      	ldr	r3, [sp, #16]
 80027a6:	eba0 000a 	sub.w	r0, r0, sl
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	4082      	lsls	r2, r0
 80027ae:	4313      	orrs	r3, r2
 80027b0:	3401      	adds	r4, #1
 80027b2:	9304      	str	r3, [sp, #16]
 80027b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027b8:	4824      	ldr	r0, [pc, #144]	@ (800284c <_svfiprintf_r+0x1e8>)
 80027ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80027be:	2206      	movs	r2, #6
 80027c0:	f7fd fd16 	bl	80001f0 <memchr>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d036      	beq.n	8002836 <_svfiprintf_r+0x1d2>
 80027c8:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <_svfiprintf_r+0x1ec>)
 80027ca:	bb1b      	cbnz	r3, 8002814 <_svfiprintf_r+0x1b0>
 80027cc:	9b03      	ldr	r3, [sp, #12]
 80027ce:	3307      	adds	r3, #7
 80027d0:	f023 0307 	bic.w	r3, r3, #7
 80027d4:	3308      	adds	r3, #8
 80027d6:	9303      	str	r3, [sp, #12]
 80027d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027da:	4433      	add	r3, r6
 80027dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80027de:	e76a      	b.n	80026b6 <_svfiprintf_r+0x52>
 80027e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80027e4:	460c      	mov	r4, r1
 80027e6:	2001      	movs	r0, #1
 80027e8:	e7a8      	b.n	800273c <_svfiprintf_r+0xd8>
 80027ea:	2300      	movs	r3, #0
 80027ec:	3401      	adds	r4, #1
 80027ee:	9305      	str	r3, [sp, #20]
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 0c0a 	mov.w	ip, #10
 80027f6:	4620      	mov	r0, r4
 80027f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027fc:	3a30      	subs	r2, #48	@ 0x30
 80027fe:	2a09      	cmp	r2, #9
 8002800:	d903      	bls.n	800280a <_svfiprintf_r+0x1a6>
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0c6      	beq.n	8002794 <_svfiprintf_r+0x130>
 8002806:	9105      	str	r1, [sp, #20]
 8002808:	e7c4      	b.n	8002794 <_svfiprintf_r+0x130>
 800280a:	fb0c 2101 	mla	r1, ip, r1, r2
 800280e:	4604      	mov	r4, r0
 8002810:	2301      	movs	r3, #1
 8002812:	e7f0      	b.n	80027f6 <_svfiprintf_r+0x192>
 8002814:	ab03      	add	r3, sp, #12
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	462a      	mov	r2, r5
 800281a:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <_svfiprintf_r+0x1f0>)
 800281c:	a904      	add	r1, sp, #16
 800281e:	4638      	mov	r0, r7
 8002820:	f3af 8000 	nop.w
 8002824:	1c42      	adds	r2, r0, #1
 8002826:	4606      	mov	r6, r0
 8002828:	d1d6      	bne.n	80027d8 <_svfiprintf_r+0x174>
 800282a:	89ab      	ldrh	r3, [r5, #12]
 800282c:	065b      	lsls	r3, r3, #25
 800282e:	f53f af2d 	bmi.w	800268c <_svfiprintf_r+0x28>
 8002832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002834:	e72c      	b.n	8002690 <_svfiprintf_r+0x2c>
 8002836:	ab03      	add	r3, sp, #12
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	462a      	mov	r2, r5
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <_svfiprintf_r+0x1f0>)
 800283e:	a904      	add	r1, sp, #16
 8002840:	4638      	mov	r0, r7
 8002842:	f000 f879 	bl	8002938 <_printf_i>
 8002846:	e7ed      	b.n	8002824 <_svfiprintf_r+0x1c0>
 8002848:	08003008 	.word	0x08003008
 800284c:	08003012 	.word	0x08003012
 8002850:	00000000 	.word	0x00000000
 8002854:	080025ad 	.word	0x080025ad
 8002858:	0800300e 	.word	0x0800300e

0800285c <_printf_common>:
 800285c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002860:	4616      	mov	r6, r2
 8002862:	4698      	mov	r8, r3
 8002864:	688a      	ldr	r2, [r1, #8]
 8002866:	690b      	ldr	r3, [r1, #16]
 8002868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800286c:	4293      	cmp	r3, r2
 800286e:	bfb8      	it	lt
 8002870:	4613      	movlt	r3, r2
 8002872:	6033      	str	r3, [r6, #0]
 8002874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002878:	4607      	mov	r7, r0
 800287a:	460c      	mov	r4, r1
 800287c:	b10a      	cbz	r2, 8002882 <_printf_common+0x26>
 800287e:	3301      	adds	r3, #1
 8002880:	6033      	str	r3, [r6, #0]
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	0699      	lsls	r1, r3, #26
 8002886:	bf42      	ittt	mi
 8002888:	6833      	ldrmi	r3, [r6, #0]
 800288a:	3302      	addmi	r3, #2
 800288c:	6033      	strmi	r3, [r6, #0]
 800288e:	6825      	ldr	r5, [r4, #0]
 8002890:	f015 0506 	ands.w	r5, r5, #6
 8002894:	d106      	bne.n	80028a4 <_printf_common+0x48>
 8002896:	f104 0a19 	add.w	sl, r4, #25
 800289a:	68e3      	ldr	r3, [r4, #12]
 800289c:	6832      	ldr	r2, [r6, #0]
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	42ab      	cmp	r3, r5
 80028a2:	dc26      	bgt.n	80028f2 <_printf_common+0x96>
 80028a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028a8:	6822      	ldr	r2, [r4, #0]
 80028aa:	3b00      	subs	r3, #0
 80028ac:	bf18      	it	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	0692      	lsls	r2, r2, #26
 80028b2:	d42b      	bmi.n	800290c <_printf_common+0xb0>
 80028b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80028b8:	4641      	mov	r1, r8
 80028ba:	4638      	mov	r0, r7
 80028bc:	47c8      	blx	r9
 80028be:	3001      	adds	r0, #1
 80028c0:	d01e      	beq.n	8002900 <_printf_common+0xa4>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	6922      	ldr	r2, [r4, #16]
 80028c6:	f003 0306 	and.w	r3, r3, #6
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf02      	ittt	eq
 80028ce:	68e5      	ldreq	r5, [r4, #12]
 80028d0:	6833      	ldreq	r3, [r6, #0]
 80028d2:	1aed      	subeq	r5, r5, r3
 80028d4:	68a3      	ldr	r3, [r4, #8]
 80028d6:	bf0c      	ite	eq
 80028d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028dc:	2500      	movne	r5, #0
 80028de:	4293      	cmp	r3, r2
 80028e0:	bfc4      	itt	gt
 80028e2:	1a9b      	subgt	r3, r3, r2
 80028e4:	18ed      	addgt	r5, r5, r3
 80028e6:	2600      	movs	r6, #0
 80028e8:	341a      	adds	r4, #26
 80028ea:	42b5      	cmp	r5, r6
 80028ec:	d11a      	bne.n	8002924 <_printf_common+0xc8>
 80028ee:	2000      	movs	r0, #0
 80028f0:	e008      	b.n	8002904 <_printf_common+0xa8>
 80028f2:	2301      	movs	r3, #1
 80028f4:	4652      	mov	r2, sl
 80028f6:	4641      	mov	r1, r8
 80028f8:	4638      	mov	r0, r7
 80028fa:	47c8      	blx	r9
 80028fc:	3001      	adds	r0, #1
 80028fe:	d103      	bne.n	8002908 <_printf_common+0xac>
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002908:	3501      	adds	r5, #1
 800290a:	e7c6      	b.n	800289a <_printf_common+0x3e>
 800290c:	18e1      	adds	r1, r4, r3
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	2030      	movs	r0, #48	@ 0x30
 8002912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002916:	4422      	add	r2, r4
 8002918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800291c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002920:	3302      	adds	r3, #2
 8002922:	e7c7      	b.n	80028b4 <_printf_common+0x58>
 8002924:	2301      	movs	r3, #1
 8002926:	4622      	mov	r2, r4
 8002928:	4641      	mov	r1, r8
 800292a:	4638      	mov	r0, r7
 800292c:	47c8      	blx	r9
 800292e:	3001      	adds	r0, #1
 8002930:	d0e6      	beq.n	8002900 <_printf_common+0xa4>
 8002932:	3601      	adds	r6, #1
 8002934:	e7d9      	b.n	80028ea <_printf_common+0x8e>
	...

08002938 <_printf_i>:
 8002938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800293c:	7e0f      	ldrb	r7, [r1, #24]
 800293e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002940:	2f78      	cmp	r7, #120	@ 0x78
 8002942:	4691      	mov	r9, r2
 8002944:	4680      	mov	r8, r0
 8002946:	460c      	mov	r4, r1
 8002948:	469a      	mov	sl, r3
 800294a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800294e:	d807      	bhi.n	8002960 <_printf_i+0x28>
 8002950:	2f62      	cmp	r7, #98	@ 0x62
 8002952:	d80a      	bhi.n	800296a <_printf_i+0x32>
 8002954:	2f00      	cmp	r7, #0
 8002956:	f000 80d1 	beq.w	8002afc <_printf_i+0x1c4>
 800295a:	2f58      	cmp	r7, #88	@ 0x58
 800295c:	f000 80b8 	beq.w	8002ad0 <_printf_i+0x198>
 8002960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002968:	e03a      	b.n	80029e0 <_printf_i+0xa8>
 800296a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800296e:	2b15      	cmp	r3, #21
 8002970:	d8f6      	bhi.n	8002960 <_printf_i+0x28>
 8002972:	a101      	add	r1, pc, #4	@ (adr r1, 8002978 <_printf_i+0x40>)
 8002974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002978:	080029d1 	.word	0x080029d1
 800297c:	080029e5 	.word	0x080029e5
 8002980:	08002961 	.word	0x08002961
 8002984:	08002961 	.word	0x08002961
 8002988:	08002961 	.word	0x08002961
 800298c:	08002961 	.word	0x08002961
 8002990:	080029e5 	.word	0x080029e5
 8002994:	08002961 	.word	0x08002961
 8002998:	08002961 	.word	0x08002961
 800299c:	08002961 	.word	0x08002961
 80029a0:	08002961 	.word	0x08002961
 80029a4:	08002ae3 	.word	0x08002ae3
 80029a8:	08002a0f 	.word	0x08002a0f
 80029ac:	08002a9d 	.word	0x08002a9d
 80029b0:	08002961 	.word	0x08002961
 80029b4:	08002961 	.word	0x08002961
 80029b8:	08002b05 	.word	0x08002b05
 80029bc:	08002961 	.word	0x08002961
 80029c0:	08002a0f 	.word	0x08002a0f
 80029c4:	08002961 	.word	0x08002961
 80029c8:	08002961 	.word	0x08002961
 80029cc:	08002aa5 	.word	0x08002aa5
 80029d0:	6833      	ldr	r3, [r6, #0]
 80029d2:	1d1a      	adds	r2, r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6032      	str	r2, [r6, #0]
 80029d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80029e0:	2301      	movs	r3, #1
 80029e2:	e09c      	b.n	8002b1e <_printf_i+0x1e6>
 80029e4:	6833      	ldr	r3, [r6, #0]
 80029e6:	6820      	ldr	r0, [r4, #0]
 80029e8:	1d19      	adds	r1, r3, #4
 80029ea:	6031      	str	r1, [r6, #0]
 80029ec:	0606      	lsls	r6, r0, #24
 80029ee:	d501      	bpl.n	80029f4 <_printf_i+0xbc>
 80029f0:	681d      	ldr	r5, [r3, #0]
 80029f2:	e003      	b.n	80029fc <_printf_i+0xc4>
 80029f4:	0645      	lsls	r5, r0, #25
 80029f6:	d5fb      	bpl.n	80029f0 <_printf_i+0xb8>
 80029f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80029fc:	2d00      	cmp	r5, #0
 80029fe:	da03      	bge.n	8002a08 <_printf_i+0xd0>
 8002a00:	232d      	movs	r3, #45	@ 0x2d
 8002a02:	426d      	negs	r5, r5
 8002a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a08:	4858      	ldr	r0, [pc, #352]	@ (8002b6c <_printf_i+0x234>)
 8002a0a:	230a      	movs	r3, #10
 8002a0c:	e011      	b.n	8002a32 <_printf_i+0xfa>
 8002a0e:	6821      	ldr	r1, [r4, #0]
 8002a10:	6833      	ldr	r3, [r6, #0]
 8002a12:	0608      	lsls	r0, r1, #24
 8002a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a18:	d402      	bmi.n	8002a20 <_printf_i+0xe8>
 8002a1a:	0649      	lsls	r1, r1, #25
 8002a1c:	bf48      	it	mi
 8002a1e:	b2ad      	uxthmi	r5, r5
 8002a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a22:	4852      	ldr	r0, [pc, #328]	@ (8002b6c <_printf_i+0x234>)
 8002a24:	6033      	str	r3, [r6, #0]
 8002a26:	bf14      	ite	ne
 8002a28:	230a      	movne	r3, #10
 8002a2a:	2308      	moveq	r3, #8
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a32:	6866      	ldr	r6, [r4, #4]
 8002a34:	60a6      	str	r6, [r4, #8]
 8002a36:	2e00      	cmp	r6, #0
 8002a38:	db05      	blt.n	8002a46 <_printf_i+0x10e>
 8002a3a:	6821      	ldr	r1, [r4, #0]
 8002a3c:	432e      	orrs	r6, r5
 8002a3e:	f021 0104 	bic.w	r1, r1, #4
 8002a42:	6021      	str	r1, [r4, #0]
 8002a44:	d04b      	beq.n	8002ade <_printf_i+0x1a6>
 8002a46:	4616      	mov	r6, r2
 8002a48:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a4c:	fb03 5711 	mls	r7, r3, r1, r5
 8002a50:	5dc7      	ldrb	r7, [r0, r7]
 8002a52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a56:	462f      	mov	r7, r5
 8002a58:	42bb      	cmp	r3, r7
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	d9f4      	bls.n	8002a48 <_printf_i+0x110>
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d10b      	bne.n	8002a7a <_printf_i+0x142>
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	07df      	lsls	r7, r3, #31
 8002a66:	d508      	bpl.n	8002a7a <_printf_i+0x142>
 8002a68:	6923      	ldr	r3, [r4, #16]
 8002a6a:	6861      	ldr	r1, [r4, #4]
 8002a6c:	4299      	cmp	r1, r3
 8002a6e:	bfde      	ittt	le
 8002a70:	2330      	movle	r3, #48	@ 0x30
 8002a72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a7a:	1b92      	subs	r2, r2, r6
 8002a7c:	6122      	str	r2, [r4, #16]
 8002a7e:	f8cd a000 	str.w	sl, [sp]
 8002a82:	464b      	mov	r3, r9
 8002a84:	aa03      	add	r2, sp, #12
 8002a86:	4621      	mov	r1, r4
 8002a88:	4640      	mov	r0, r8
 8002a8a:	f7ff fee7 	bl	800285c <_printf_common>
 8002a8e:	3001      	adds	r0, #1
 8002a90:	d14a      	bne.n	8002b28 <_printf_i+0x1f0>
 8002a92:	f04f 30ff 	mov.w	r0, #4294967295
 8002a96:	b004      	add	sp, #16
 8002a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	6023      	str	r3, [r4, #0]
 8002aa4:	4832      	ldr	r0, [pc, #200]	@ (8002b70 <_printf_i+0x238>)
 8002aa6:	2778      	movs	r7, #120	@ 0x78
 8002aa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	6831      	ldr	r1, [r6, #0]
 8002ab0:	061f      	lsls	r7, r3, #24
 8002ab2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ab6:	d402      	bmi.n	8002abe <_printf_i+0x186>
 8002ab8:	065f      	lsls	r7, r3, #25
 8002aba:	bf48      	it	mi
 8002abc:	b2ad      	uxthmi	r5, r5
 8002abe:	6031      	str	r1, [r6, #0]
 8002ac0:	07d9      	lsls	r1, r3, #31
 8002ac2:	bf44      	itt	mi
 8002ac4:	f043 0320 	orrmi.w	r3, r3, #32
 8002ac8:	6023      	strmi	r3, [r4, #0]
 8002aca:	b11d      	cbz	r5, 8002ad4 <_printf_i+0x19c>
 8002acc:	2310      	movs	r3, #16
 8002ace:	e7ad      	b.n	8002a2c <_printf_i+0xf4>
 8002ad0:	4826      	ldr	r0, [pc, #152]	@ (8002b6c <_printf_i+0x234>)
 8002ad2:	e7e9      	b.n	8002aa8 <_printf_i+0x170>
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	f023 0320 	bic.w	r3, r3, #32
 8002ada:	6023      	str	r3, [r4, #0]
 8002adc:	e7f6      	b.n	8002acc <_printf_i+0x194>
 8002ade:	4616      	mov	r6, r2
 8002ae0:	e7bd      	b.n	8002a5e <_printf_i+0x126>
 8002ae2:	6833      	ldr	r3, [r6, #0]
 8002ae4:	6825      	ldr	r5, [r4, #0]
 8002ae6:	6961      	ldr	r1, [r4, #20]
 8002ae8:	1d18      	adds	r0, r3, #4
 8002aea:	6030      	str	r0, [r6, #0]
 8002aec:	062e      	lsls	r6, r5, #24
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	d501      	bpl.n	8002af6 <_printf_i+0x1be>
 8002af2:	6019      	str	r1, [r3, #0]
 8002af4:	e002      	b.n	8002afc <_printf_i+0x1c4>
 8002af6:	0668      	lsls	r0, r5, #25
 8002af8:	d5fb      	bpl.n	8002af2 <_printf_i+0x1ba>
 8002afa:	8019      	strh	r1, [r3, #0]
 8002afc:	2300      	movs	r3, #0
 8002afe:	6123      	str	r3, [r4, #16]
 8002b00:	4616      	mov	r6, r2
 8002b02:	e7bc      	b.n	8002a7e <_printf_i+0x146>
 8002b04:	6833      	ldr	r3, [r6, #0]
 8002b06:	1d1a      	adds	r2, r3, #4
 8002b08:	6032      	str	r2, [r6, #0]
 8002b0a:	681e      	ldr	r6, [r3, #0]
 8002b0c:	6862      	ldr	r2, [r4, #4]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4630      	mov	r0, r6
 8002b12:	f7fd fb6d 	bl	80001f0 <memchr>
 8002b16:	b108      	cbz	r0, 8002b1c <_printf_i+0x1e4>
 8002b18:	1b80      	subs	r0, r0, r6
 8002b1a:	6060      	str	r0, [r4, #4]
 8002b1c:	6863      	ldr	r3, [r4, #4]
 8002b1e:	6123      	str	r3, [r4, #16]
 8002b20:	2300      	movs	r3, #0
 8002b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b26:	e7aa      	b.n	8002a7e <_printf_i+0x146>
 8002b28:	6923      	ldr	r3, [r4, #16]
 8002b2a:	4632      	mov	r2, r6
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	4640      	mov	r0, r8
 8002b30:	47d0      	blx	sl
 8002b32:	3001      	adds	r0, #1
 8002b34:	d0ad      	beq.n	8002a92 <_printf_i+0x15a>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	079b      	lsls	r3, r3, #30
 8002b3a:	d413      	bmi.n	8002b64 <_printf_i+0x22c>
 8002b3c:	68e0      	ldr	r0, [r4, #12]
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	4298      	cmp	r0, r3
 8002b42:	bfb8      	it	lt
 8002b44:	4618      	movlt	r0, r3
 8002b46:	e7a6      	b.n	8002a96 <_printf_i+0x15e>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	4640      	mov	r0, r8
 8002b50:	47d0      	blx	sl
 8002b52:	3001      	adds	r0, #1
 8002b54:	d09d      	beq.n	8002a92 <_printf_i+0x15a>
 8002b56:	3501      	adds	r5, #1
 8002b58:	68e3      	ldr	r3, [r4, #12]
 8002b5a:	9903      	ldr	r1, [sp, #12]
 8002b5c:	1a5b      	subs	r3, r3, r1
 8002b5e:	42ab      	cmp	r3, r5
 8002b60:	dcf2      	bgt.n	8002b48 <_printf_i+0x210>
 8002b62:	e7eb      	b.n	8002b3c <_printf_i+0x204>
 8002b64:	2500      	movs	r5, #0
 8002b66:	f104 0619 	add.w	r6, r4, #25
 8002b6a:	e7f5      	b.n	8002b58 <_printf_i+0x220>
 8002b6c:	08003019 	.word	0x08003019
 8002b70:	0800302a 	.word	0x0800302a

08002b74 <memmove>:
 8002b74:	4288      	cmp	r0, r1
 8002b76:	b510      	push	{r4, lr}
 8002b78:	eb01 0402 	add.w	r4, r1, r2
 8002b7c:	d902      	bls.n	8002b84 <memmove+0x10>
 8002b7e:	4284      	cmp	r4, r0
 8002b80:	4623      	mov	r3, r4
 8002b82:	d807      	bhi.n	8002b94 <memmove+0x20>
 8002b84:	1e43      	subs	r3, r0, #1
 8002b86:	42a1      	cmp	r1, r4
 8002b88:	d008      	beq.n	8002b9c <memmove+0x28>
 8002b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b92:	e7f8      	b.n	8002b86 <memmove+0x12>
 8002b94:	4402      	add	r2, r0
 8002b96:	4601      	mov	r1, r0
 8002b98:	428a      	cmp	r2, r1
 8002b9a:	d100      	bne.n	8002b9e <memmove+0x2a>
 8002b9c:	bd10      	pop	{r4, pc}
 8002b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ba6:	e7f7      	b.n	8002b98 <memmove+0x24>

08002ba8 <_sbrk_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	4d06      	ldr	r5, [pc, #24]	@ (8002bc4 <_sbrk_r+0x1c>)
 8002bac:	2300      	movs	r3, #0
 8002bae:	4604      	mov	r4, r0
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	602b      	str	r3, [r5, #0]
 8002bb4:	f7fd ff18 	bl	80009e8 <_sbrk>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d102      	bne.n	8002bc2 <_sbrk_r+0x1a>
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	b103      	cbz	r3, 8002bc2 <_sbrk_r+0x1a>
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	20000200 	.word	0x20000200

08002bc8 <_realloc_r>:
 8002bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bcc:	4607      	mov	r7, r0
 8002bce:	4614      	mov	r4, r2
 8002bd0:	460d      	mov	r5, r1
 8002bd2:	b921      	cbnz	r1, 8002bde <_realloc_r+0x16>
 8002bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd8:	4611      	mov	r1, r2
 8002bda:	f7ff bc5b 	b.w	8002494 <_malloc_r>
 8002bde:	b92a      	cbnz	r2, 8002bec <_realloc_r+0x24>
 8002be0:	f7ff fbec 	bl	80023bc <_free_r>
 8002be4:	4625      	mov	r5, r4
 8002be6:	4628      	mov	r0, r5
 8002be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bec:	f000 f81a 	bl	8002c24 <_malloc_usable_size_r>
 8002bf0:	4284      	cmp	r4, r0
 8002bf2:	4606      	mov	r6, r0
 8002bf4:	d802      	bhi.n	8002bfc <_realloc_r+0x34>
 8002bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bfa:	d8f4      	bhi.n	8002be6 <_realloc_r+0x1e>
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	4638      	mov	r0, r7
 8002c00:	f7ff fc48 	bl	8002494 <_malloc_r>
 8002c04:	4680      	mov	r8, r0
 8002c06:	b908      	cbnz	r0, 8002c0c <_realloc_r+0x44>
 8002c08:	4645      	mov	r5, r8
 8002c0a:	e7ec      	b.n	8002be6 <_realloc_r+0x1e>
 8002c0c:	42b4      	cmp	r4, r6
 8002c0e:	4622      	mov	r2, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	bf28      	it	cs
 8002c14:	4632      	movcs	r2, r6
 8002c16:	f7ff fbc3 	bl	80023a0 <memcpy>
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	f7ff fbcd 	bl	80023bc <_free_r>
 8002c22:	e7f1      	b.n	8002c08 <_realloc_r+0x40>

08002c24 <_malloc_usable_size_r>:
 8002c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c28:	1f18      	subs	r0, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bfbc      	itt	lt
 8002c2e:	580b      	ldrlt	r3, [r1, r0]
 8002c30:	18c0      	addlt	r0, r0, r3
 8002c32:	4770      	bx	lr

08002c34 <_init>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	bf00      	nop
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr

08002c40 <_fini>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr
